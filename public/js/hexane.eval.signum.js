/*! Hexane.Eval (SigNum Version): JS latex math evaluator that works with SigNum.js (dependency). Works best with latex from MathQuill.
 *  Copyright 2017 Alex Yu (U-Hill Secondary)
 *  License: Apache 2.0
 *  Created for use with Hexane (hexane.tk)*/

/* parser generated by jison 0.4.17. Usage: Hexane.Eval.parse("EXPRESSION") */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
Hexane || (Hexane = {});
Hexane.Eval = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,3],$V2=[1,4],$V3=[1,5],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,16],$Vd=[1,15],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,20],$Vi=[1,21],$Vj=[1,22],$Vk=[1,24],$Vl=[1,25],$Vm=[1,26],$Vn=[1,27],$Vo=[1,28],$Vp=[1,29],$Vq=[1,30],$Vr=[1,31],$Vs=[1,32],$Vt=[1,33],$Vu=[1,34],$Vv=[1,35],$Vw=[1,36],$Vx=[1,37],$Vy=[1,38],$Vz=[1,39],$VA=[1,40],$VB=[1,41],$VC=[1,42],$VD=[1,43],$VE=[1,44],$VF=[1,45],$VG=[1,46],$VH=[5,7,8,9,10,11,12,13,14,15,16,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,35,37,39,41],$VI=[2,46],$VJ=[1,62],$VK=[1,61],$VL=[1,64],$VM=[1,63],$VN=[5,7,8,9,10,11,12,13,14,15,16,18,19,20,22,23,25,26,27,28,29,30,31,32,33,35,37,39,41],$VO=[5,7,8,9,10,11,12,13,14,15,16,26,27,28,29,30,31,35,37,39,41],$VP=[5,7,8,9,12,14,15,16,26,27,28,29,30,31,35,37,39,41],$VQ=[5,7,12,14,16,35,37,39,41],$VR=[5,7,8,9,10,11,12,13,14,15,16,18,20,25,26,27,28,29,30,31,32,33,35,37,39,41],$VS=[5,7,12,14,15,16,26,27,28,29,30,31,35,37,39,41],$VT=[1,119],$VU=[7,35];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"expression_list":6,",":7,"+":8,"-":9,"*":10,"/":11,"|":12,"MOD":13,"OR":14,"AND":15,"XOR":16,"NOT":17,"BOR":18,"BAND":19,"BXOR":20,"BNOT":21,">>":22,"<<":23,"EXP":24,"^":25,"=":26,"!=":27,"<":28,">":29,"<=":30,">=":31,"!":32,"%":33,"(":34,")":35,"[":36,"]":37,"{":38,"}":39,"|l":40,"|r":41,"FRAC":42,"SQRT":43,"NTHROOT":44,"LOGS":45,"NUMBER":46,"LOG":47,"NAME":48,":=":49,"FORMULA":50,"E":51,"PI":52,"T":53,"F":54,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:",",8:"+",9:"-",10:"*",11:"/",12:"|",13:"MOD",14:"OR",15:"AND",16:"XOR",17:"NOT",18:"BOR",19:"BAND",20:"BXOR",21:"BNOT",22:">>",23:"<<",24:"EXP",25:"^",26:"=",27:"!=",28:"<",29:">",30:"<=",31:">=",32:"!",33:"%",34:"(",35:")",36:"[",37:"]",38:"{",39:"}",40:"|l",41:"|r",42:"FRAC",43:"SQRT",44:"NTHROOT",45:"LOGS",46:"NUMBER",47:"LOG",48:"NAME",49:":=",50:"FORMULA",51:"E",52:"PI",53:"T",54:"F"},
productions_: [0,[3,2],[6,3],[6,1],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,3],[4,3],[4,3],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,2],[4,3],[4,3],[4,3],[4,3],[4,6],[4,3],[4,6],[4,2],[4,5],[4,5],[4,5],[4,4],[4,6],[4,6],[4,6],[4,1],[4,4],[4,5],[4,3],[4,4],[4,3],[4,1],[4,1],[4,2],[4,2],[4,4],[4,1],[4,1],[4,2],[4,2],[4,1],[4,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 if (typeof console == 'undefined') print($$[$0-1]);
          return $$[$0-1]; 
break;
case 2:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4:
this.$ = $$[$0-2].plus($$[$0]);
break;
case 5:
this.$ = $$[$0-2].minus($$[$0]);
break;
case 6:
this.$ = $$[$0-2].times($$[$0]);
break;
case 7:
this.$ = $$[$0-2].div($$[$0]);
break;
case 8: case 34:
this.$ = SigNum.abs($$[$0-1]);
break;
case 9:
this.$ = $$[$0-2].mod($$[$0]);
break;
case 10:
this.$ = $$[$0-2] || $$[$0];
break;
case 11:
this.$ = $$[$0-2] && $$[$0];
break;
case 12:
this.$ = ($$[$0-2] || $$[$0]) && !($$[$0-2] && $$[$0]) ;
break;
case 13:
this.$ = !$$[$0];
break;
case 14:
this.$ = $$[$0-2].or($$[$0]);
break;
case 15:
this.$ = $$[$0-2].and($$[$0]);
break;
case 16:
this.$ = $$[$0-2].xor($$[$0]);
break;
case 17:
this.$ = $$[$0].not();
break;
case 18:
this.$ = $$[$0-2].shr($$[$0]);
break;
case 19:
this.$ = $$[$0-2].shl($$[$0]);
break;
case 20:
this.$ = $$[$0-2].scale(SigNum.pow(10, $$[$0]));
break;
case 21:
this.$ = $$[$0-2].expo($$[$0]);
break;
case 22:
this.$ = ($$[$0-2].value != undefined ? $$[$0-2].value == $$[$0].value : $$[$0-2] == $$[$0]);
break;
case 23:
this.$ = ($$[$0-2].value != undefined ? $$[$0-2].value != $$[$0].value : $$[$0-2] != $$[$0]);
break;
case 24:
this.$ = $$[$0-2] < $$[$0];
break;
case 25:
this.$ = $$[$0-2] > $$[$0];
break;
case 26:
this.$ = $$[$0-2] <= $$[$0];
break;
case 27:
this.$ = $$[$0-2] >= $$[$0];
break;
case 28:

          this.$ = (function fact (n) { return n==0 ? 1 : fact(n.minus(1)).times(n) })($$[$0-1]);
        
break;
case 29:
this.$ = $$[$0-1].times(0.01);
break;
case 30:
this.$ = $$[$0].times(-1);
break;
case 31: case 32: case 33:
this.$ = $$[$0-1];
break;
case 35:
this.$  = $$[$0-4].div($$[$0-1]);
break;
case 36:
this.$ = SigNum.sqrt($$[$0-1]);
break;
case 37:
this.$ = SigNum.root($$[$0-1], $$[$0-4]);
break;
case 38:
var tmp = SigNum.floor($$[$0].div(SigNum.pow(10,SigNum.floor(SigNum.log10($$[$0])))));
		 var val = $$[$0].minus(tmp.times(SigNum.pow(10,SigNum.floor(SigNum.log10($$[$0])))));
		 this.$ = SigNum.log(val, tmp); 
break;
case 39: case 40: case 41:
this.$ = SigNum.log($$[$0-1], $$[$0-3]) 
break;
case 42:
this.$ = SigNum.log($$[$0], $$[$0-2]) 
break;
case 43: case 44: case 45:
this.$ = SigNum.log($$[$0-1], $$[$0-4]) 
break;
case 46:
this.$ = new SigNum(yytext);
break;
case 47:
if ($$[$0-3][0] == '\\') $$[$0-3] = $$[$0-3].substring(1);
		 this.$ = Hexane.funcs[$$[$0-3]].apply(undefined, $$[$0-1]);
break;
case 48:
if ($$[$0-3][0] == '\\') $$[$0-3] = $$[$0-3].substring(1);
		 this.$ = $$[$0-4] * Hexane.funcs[$$[$0-3]].apply(undefined, $$[$0-1]);
break;
case 49:
if ($$[$0-2][0] == '\\') $$[$0-2] = $$[$0-2].substring(1);
		 this.$ = Hexane.funcs[$$[$0-2]].apply(undefined, []);
break;
case 50:
if ($$[$0-2][0] == '\\') $$[$0-2] = $$[$0-2].substring(1);
		 this.$ = $$[$0-3] * Hexane.funcs[$$[$0-2]].apply(undefined, []);
break;
case 51:
Hexane.vars[$$[$0-2]] = $$[$0]; this.$ = Hexane.vars[$$[$0-2]]; 
break;
case 52:
this.$ = Hexane.vars[$$[$0]];
break;
case 53:
this.$ = $$[$0].toString().substring(1, $$[$0].toString().length-1);
break;
case 54:
this.$ = $$[$0-1].times(Hexane.vars[$$[$0]]);
break;
case 55:
this.$ = $$[$0-1].times($$[$0]);
break;
case 56:
this.$ = Hexane.vars[$$[$0-3].concat($$[$0-1])];
break;
case 57:
this.$ = SigNum.E;
break;
case 58:
this.$ = SigNum.PI;
break;
case 59:
this.$ = $$[$0-1].times(SigNum.PI);
break;
case 60:
this.$ = $$[$0-1].times(SigNum.E);
break;
case 61:
this.$ = true;
break;
case 62:
this.$ = false;
break;
}
},
table: [{3:1,4:2,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{1:[3]},{5:[1,23],8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG},{4:47,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:48,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:49,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:50,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:51,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:52,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:53,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:54,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:55,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:56,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:57,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:58,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:[1,59],47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:60,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},o($VH,$VI,{46:$VJ,48:$VK,51:$VL,52:$VM}),o($VH,[2,52],{34:[1,65],38:[1,67],49:[1,66]}),o($VH,[2,53]),o($VH,[2,57]),o($VH,[2,58]),o($VH,[2,61]),o($VH,[2,62]),{1:[2,1]},{4:68,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:69,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:70,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:71,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:72,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:73,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:74,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:75,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:76,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:77,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:78,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:79,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:80,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:81,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:82,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:83,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:84,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:85,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:86,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:87,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:88,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},o($VH,[2,28]),o($VH,[2,29]),{8:$Vk,9:$Vl,10:$Vm,11:$Vn,12:[1,89],13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG},o($VN,[2,13],{24:$Vx}),o($VN,[2,17],{24:$Vx}),o($VN,[2,30],{24:$Vx}),{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,35:[1,90]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,37:[1,91]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,39:[1,92]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,41:[1,93]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,39:[1,94]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,39:[1,95]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,37:[1,96]},o($VO,[2,38],{18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VH,$VI,{34:[1,97],36:[1,98],38:[1,99],46:$VJ,48:$VK,51:$VL,52:$VM}),{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,39:[1,100]},o($VH,[2,54],{34:[1,101]}),o($VH,[2,55]),o($VH,[2,59]),o($VH,[2,60]),{4:104,6:102,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,35:[1,103],36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:105,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:106,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},o($VP,[2,4],{10:$Vm,11:$Vn,13:$Vo,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VP,[2,5],{10:$Vm,11:$Vn,13:$Vo,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VO,[2,6],{18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VO,[2,7],{18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VO,[2,9],{18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VQ,[2,10],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,15:$Vq,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG}),o([5,7,12,14,15,16,35,37,39,41],[2,11],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG}),o($VQ,[2,12],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,15:$Vq,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG}),o($VR,[2,14],{19:$Vt,22:$Vv,23:$Vw,24:$Vx}),o([5,7,8,9,10,11,12,13,14,15,16,18,19,20,25,26,27,28,29,30,31,32,33,35,37,39,41],[2,15],{22:$Vv,23:$Vw,24:$Vx}),o($VR,[2,16],{19:$Vt,22:$Vv,23:$Vw,24:$Vx}),o($VN,[2,18],{24:$Vx}),o($VN,[2,19],{24:$Vx}),o($VH,[2,20]),o([5,7,8,9,10,11,12,13,14,15,16,25,26,27,28,29,30,31,35,37,39,41],[2,21],{18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,32:$VF,33:$VG}),o($VS,[2,22],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VS,[2,23],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VS,[2,24],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VS,[2,25],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VS,[2,26],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VS,[2,27],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,32:$VF,33:$VG}),o($VH,[2,8]),o($VH,[2,31]),o($VH,[2,32]),o($VH,[2,33]),o($VH,[2,34]),{38:[1,107]},o($VH,[2,36]),{38:[1,108]},{4:109,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:110,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:111,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{34:[1,113],36:[1,114],38:[1,115],46:[1,112]},{4:104,6:116,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,35:[1,117],36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{7:$VT,35:[1,118]},o($VH,[2,49]),o($VU,[2,3],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG}),o([5,7,12,35,37,39,41],[2,51],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG}),{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,39:[1,120]},{4:121,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:122,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,35:[1,123]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,37:[1,124]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,39:[1,125]},o($VH,[2,42]),{4:126,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:127,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{4:128,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},{7:$VT,35:[1,129]},o($VH,[2,50]),o($VH,[2,47]),{4:130,9:$V0,12:$V1,17:$V2,21:$V3,34:$V4,36:$V5,38:$V6,40:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj},o($VH,[2,56]),{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,39:[1,131]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,39:[1,132]},o($VH,[2,39]),o($VH,[2,40]),o($VH,[2,41]),{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,35:[1,133]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,37:[1,134]},{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG,39:[1,135]},o($VH,[2,48]),o($VU,[2,2],{8:$Vk,9:$Vl,10:$Vm,11:$Vn,13:$Vo,14:$Vp,15:$Vq,16:$Vr,18:$Vs,19:$Vt,20:$Vu,22:$Vv,23:$Vw,24:$Vx,25:$Vy,26:$Vz,27:$VA,28:$VB,29:$VC,30:$VD,31:$VE,32:$VF,33:$VG}),o($VH,[2,35]),o($VH,[2,37]),o($VH,[2,43]),o($VH,[2,44]),o($VH,[2,45])],
defaultActions: {23:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 46
break;
case 2:return 46
break;
case 3:return 42
break;
case 4:return 10
break;
case 5:return 34
break;
case 6:return 35
break;
case 7:return 36
break;
case 8:return 37
break;
case 9:return 38
break;
case 10:return 39
break;
case 11:return 40
break;
case 12:return 41
break;
case 13:return 47
break;
case 14:return 45
break;
case 15:return 43
break;
case 16:return 44
break;
case 17:return 16
break;
case 18:return 10
break;
case 19:return 10
break;
case 20:return 11
break;
case 21:return 11
break;
case 22:return 52
break;
case 23:return 52
break;
case 24:return 51
break;
case 25:return 53
break;
case 26:return 54
break;
case 27:return 53
break;
case 28:return 54
break;
case 29:return 24
break;
case 30:return 13
break;
case 31:return 13
break;
case 32:return 17
break;
case 33:return 17
break;
case 34:return 15
break;
case 35:return 15
break;
case 36:return 14
break;
case 37:return 14
break;
case 38:return 16
break;
case 39:return 16
break;
case 40:return 19
break;
case 41:return 19
break;
case 42:return 18
break;
case 43:return 18
break;
case 44:return 20
break;
case 45:return 20
break;
case 46:return 21
break;
case 47:return 21
break;
case 48:return 30
break;
case 49:return 31
break;
case 50:return 50
break;
case 51:return 48
break;
case 52:return 48
break;
case 53:return 48
break;
case 54:return 48
break;
case 55:return 10
break;
case 56:return 11
break;
case 57:return 9
break;
case 58:return 8
break;
case 59:return 25
break;
case 60:return 33
break;
case 61:return 22
break;
case 62:return 23
break;
case 63:return 49
break;
case 64:return 26
break;
case 65:return 27
break;
case 66:return 26
break;
case 67:return 28
break;
case 68:return 29
break;
case 69:return 32
break;
case 70:return 38
break;
case 71:return 39
break;
case 72:return 33
break;
case 73:return 36
break;
case 74:return 37
break;
case 75:return 34
break;
case 76:return 35
break;
case 77:return 7
break;
case 78:return 5
break;
case 79:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:#?[0-9]+\.?([0-9#]+)?)/,/^(?:(#?\.?[0-9#]+))/,/^(?:(\\frac\{))/,/^(?:(\\cdot))/,/^(?:(\\left\())/,/^(?:(\\right\)))/,/^(?:(\\left\[))/,/^(?:(\\right\]))/,/^(?:(\\left\\\{))/,/^(?:(\\right\\\}))/,/^(?:(\\left\|))/,/^(?:(\\right\|))/,/^(?:(\\log_\{))/,/^(?:(\\log_))/,/^(?:(\\sqrt\{))/,/^(?:(\\sqrt\[))/,/^(?:(\\oplus))/,/^(?:(\\times))/,/^(?:(\\otimes))/,/^(?:(\\divide))/,/^(?:(\\div))/,/^(?:pi\b)/,/^(?:\\pi\b)/,/^(?:e\b)/,/^(?:(true))/,/^(?:(false))/,/^(?:(\\operatorname\{true\}))/,/^(?:(\\operatorname\{false\}))/,/^(?:(E))/,/^(?:(mod))/,/^(?:(\\operatorname\{mod\}))/,/^(?:(not))/,/^(?:(\\operatorname\{not\}))/,/^(?:(and))/,/^(?:(\\operatorname\{and\}))/,/^(?:(or))/,/^(?:(\\operatorname\{or\}))/,/^(?:(xor))/,/^(?:(\\operatorname\{xor\}))/,/^(?:(bitand))/,/^(?:(\\operatorname\{bitand\}))/,/^(?:(bitor))/,/^(?:(\\operatorname\{bitor\}))/,/^(?:(bitxor))/,/^(?:(\\operatorname\{bitxor\}))/,/^(?:(bitnot))/,/^(?:(\\operatorname\{bitnot\}))/,/^(?:(\\le))/,/^(?:(\\ge))/,/^(?:"(.+?)?")/,/^(?:\\[a-zA-Z"$"]+([0-9a-zA-Z"$"]+)?_\{([0-9a-zA-Z"_$"]+\}))/,/^(?:\\[a-zA-Z"_$"]+([0-9a-zA-Z"_$"]+)?)/,/^(?:[a-zA-Z"$"]+([0-9a-zA-Z"$"]+)?_\{([0-9a-zA-Z"_$"]+\}))/,/^(?:[a-zA-Z"_$"]+([0-9a-zA-Z"_$"]+)?)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:(\\%))/,/^(?:>>)/,/^(?:<<)/,/^(?::=)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:%)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Hexane.Eval;
exports.Parser = Hexane.Eval.Parser;
exports.parse = function () { return Hexane.Eval.parse.apply(Hexane.Eval, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}